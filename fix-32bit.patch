diff --git a/src/datainspection/src/CollectionInspectionEngine.cpp b/src/datainspection/src/CollectionInspectionEngine.cpp
--- a/src/datainspection/src/CollectionInspectionEngine.cpp
+++ b/src/datainspection/src/CollectionInspectionEngine.cpp
@@ -572,7 +572,7 @@ CollectionInspectionEngine::addNewRawCanFrame( CANRawFrameID canID,
                     buf.mCurrentPosition = 0;
                 }
                 buf.mBuffer[buf.mCurrentPosition].mSize = std::min( size, static_cast<uint8_t>( buf.mBuffer.size() ) );
-                for ( uint64_t i = 0; i < buf.mBuffer[buf.mCurrentPosition].mSize; i++ )
+                for ( size_t i = 0; i < buf.mBuffer[buf.mCurrentPosition].mSize; i++ )
                 {
                     buf.mBuffer[buf.mCurrentPosition].mBuffer[i] = buffer[i];
                 }
diff --git a/src/offboardconnectivity/implementation/awsiotcpp/include/IoTSDKCustomAllocators.h b/src/offboardconnectivity/implementation/awsiotcpp/include/IoTSDKCustomAllocators.h
--- a/src/offboardconnectivity/implementation/awsiotcpp/include/IoTSDKCustomAllocators.h
+++ b/src/offboardconnectivity/implementation/awsiotcpp/include/IoTSDKCustomAllocators.h
@@ -29,7 +29,7 @@ extern std::atomic<uint64_t>
                        * and observe the heap memory used by the SDK. So the application can stop sending if the
                        * SDK heap usage exceeds a certain threshold
                        */
-using MemBlockSize = uint64_t;
+using MemBlockSize = size_t;
 
 extern void *SdkMemAcquireWrapper( struct aws_allocator *allocator, size_t size );
 
diff --git a/src/platform/linux/logmanagement/src/ConsoleLogger.cpp b/src/platform/linux/logmanagement/src/ConsoleLogger.cpp
--- a/src/platform/linux/logmanagement/src/ConsoleLogger.cpp
+++ b/src/platform/linux/logmanagement/src/ConsoleLogger.cpp
@@ -17,6 +17,7 @@
 #include "ConsoleLogger.h"
 #include "ClockHandler.h"
 #include <chrono>
+#include <inttypes.h>
 #include <iomanip>
 #include <mutex>
 #include <sstream>
@@ -74,7 +75,7 @@ ConsoleLogger::logMessage( LogLevel level, const std::string &function, const st
 {
     if ( level >= gSystemWideLogLevel )
     {
-        std::printf( "[Thread : %lu] [%s] [%s] [%s]: [%s] ",
+        std::printf( "[Thread : %" PRIu64 "] [%s] [%s] [%s]: [%s] ",
                      currentThreadId(),
                      timeAsString().c_str(),
                      levelToString( level ).c_str(),
